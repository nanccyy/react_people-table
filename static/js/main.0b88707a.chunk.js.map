{"version":3,"sources":["components/HomePage/HomePage.jsx","api/people.js","components/PersonName/PersonName.jsx","components/PersonRow/PersonRow.jsx","components/PeoplePage/PeoplePage.jsx","components/NotFoundPage/NotFoundPage.jsx","App.jsx","index.js"],"names":["HomePage","className","getPeople","a","fetch","response","people","json","PersonName","name","match","slug","sex","location","setUrl","useEffect","params","id","classNames","link_m","link_f","to","pathname","search","exact","PersonRow","idSelected","setIdSelected","useState","url","isPersonFound","parent","find","person","map","born","died","motherName","fatherName","key","path","render","cell_active","PeoplePage","peopleFromServer","setPeopleFromServer","setPeople","setName","sort","setSort","history","useHistory","useLocation","searchParams","URLSearchParams","query","get","ids","split","i","length","includes","then","data","filter","param","toLowerCase","startsWith","planQueryUpdate","useCallback","func","delay","timerId","clearTimeout","args","setTimeout","debounce","set","delete","push","toString","sortPeople","order","b","localeCompare","type","value","onChange","event","target","handleQueryUpdate","onClick","NotFoundPage","App","activeClassName","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0b88707a.chunk.js","sourcesContent":["import React from 'react';\n\nexport const HomePage = () => (\n  <h1 className=\"title\">Home page</h1>\n);","// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport const getPeople = async() => {\n  const response = await fetch(BASE_URL);\n  const people = response.json();\n\n  return people;\n};\n","import React, { useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './PersonName.scss';\nimport classNames from 'classnames';\n\nexport const PersonName = ({ name, match, slug, sex, location, setUrl }) => {\n  useEffect(() => {\n   setUrl(match.params.id)\n  }, [match.params.id, setUrl])\n\n  return (\n    <NavLink\n      className={classNames({\n        link_m: sex === 'm',\n        link_f: sex === 'f'\n      })}\n      to={{\n       pathname: `/people/${slug}/`,\n       search: location.search\n      }}\n      exact\n      >\n        {name}\n    </NavLink>\n  )\n}","import React, {useState } from 'react';\nimport { PersonName } from '../PersonName/PersonName';\nimport { Route } from 'react-router-dom';\nimport './PersonRow.scss';\nimport classNames from 'classnames';\n\nexport const PersonRow = ({ people, idSelected, setIdSelected }) => {\n  const [url, setUrl] = useState('');\n\n  const isPersonFound = (parent) => {\n    return people.find(person => person.name === parent);\n  };\n\n  return (\n    <>\n      {people.map(person => {\n        const { slug, name, sex, born, died, motherName, fatherName } = person;\n        return (\n          <Route key={slug} path={`/people/:id?`} render={({ match, location }) => (\n            <>\n              <tr \n              className={classNames({\n                \"is-selected\": slug === url\n              })}>\n                <td  className={classNames({\n                  cell_active: idSelected === 'name'\n                 })}>\n                  <PersonName\n                    sex={sex}\n                    name={name}\n                    match={match}\n                    slug={slug}\n                    location={location}\n                    setUrl={setUrl}\n                  >\n                  </PersonName>\n                </td>\n                <td \n                className={classNames({\n                  cell_active: idSelected === 'sex'\n                 })}\n                >{sex}</td>\n                <td\n                 className={classNames({\n                  cell_active: idSelected === 'born'\n                 })}\n                 >{born}</td>\n                <td\n                 className={classNames({\n                  cell_active: idSelected === 'died'\n                 })}\n                 >{died}</td>\n                <td>\n                  {isPersonFound(motherName) ?\n                  <PersonName\n                  sex={isPersonFound(motherName).sex}\n                  name={motherName}\n                  match={match}\n                  slug={isPersonFound(motherName).slug}\n                  location={location}\n                  setUrl={setUrl}>\n                  </PersonName>\n                  : <>{motherName}</>\n                  }\n                </td>\n                <td>\n                  {isPersonFound(fatherName) ?\n                   <PersonName\n                   sex={isPersonFound(fatherName).sex}\n                   name={fatherName}\n                   match={match}\n                   slug={isPersonFound(fatherName).slug}\n                   location={location}\n                   setUrl={setUrl}>\n                   </PersonName>\n                  : <>{fatherName}</>\n                  }\n                </td>\n              </tr>\n            </>\n          )}>\n          </Route>\n        )\n      })\n      }\n\n    </>\n  )\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport { getPeople } from '../../api/people';\nimport { PersonRow } from '../PersonRow/PersonRow';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport classNames from 'classnames';\n\nexport const PeoplePage = ({ match }) => {\n  const [peopleFromServer, setPeopleFromServer] = useState([])\n  const [people, setPeople] = useState([]);\n  const [name, setName] = useState('');\n  const [sort, setSort] = useState({});\n  const [idSelected, setIdSelected] = useState('');\n\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    const ids = ['name', 'sex', 'died', 'born'];\n    let search = location.search.split('?');\n    for (let i = 0; i < ids.length; i++) {\n      if (search.includes(`sortBy=${ids[i]}`)) {\n        setIdSelected(ids[i]);\n      }\n    }\n  }, [location.search]);\n\n  useEffect(() => {\n    getPeople().then(data => (setPeople(data), setPeopleFromServer(data)));\n  }, []);\n\n  useEffect(() => {\n    filter(query);\n  }, [query]);\n\n  const filter = (param) => {\n    if (param) {\n      setPeople(peopleFromServer.filter(person =>\n        person.name.toLowerCase().startsWith(param)\n        || (person.motherName && person.motherName.toLowerCase().startsWith(param))\n        || (person.fatherName && person.fatherName.toLowerCase().startsWith(param))));\n    } else {\n      setPeople(peopleFromServer);\n    }\n  }\n\n  const debounce = (func, delay) => {\n    let timerId = 0;\n    return (...args) => {\n      clearTimeout(timerId);\n      timerId = setTimeout(func, delay, ...args)\n    };\n  }\n\n  const updateQuery = (query) => {\n    if (query) {\n      searchParams.set('query', query);\n    } else {\n      searchParams.delete('query');\n    }\n    history.push({\n      search: searchParams.toString(),\n    });\n  };\n\n  const planQueryUpdate = useCallback(debounce(updateQuery, 500), []);\n\n  const handleQueryUpdate = (event) => {\n    setName(event.target.value)\n    planQueryUpdate(event.target.value);\n  }\n\n  const sortPeople = (id) => {\n    let order;\n    if (!sort[id] || sort[id] === 'desc') {\n      if (id === 'died' || id === 'born') {\n        setPeople(people.sort((a, b) => (a[id] - b[id])));\n      } else {\n        setPeople(people.sort((a, b) => (a[id] && b[id] && a[id].localeCompare(b[id]))));\n      }\n      order = 'asc';\n    } else {\n      if (id === 'died' || id === 'born') {\n        setPeople(people.sort((a, b) => (b[id] - a[id])));\n      } else {\n        setPeople(people.sort((a, b) => (a[id] && b[id] && b[id].localeCompare(a[id]))));\n      }\n      order = 'desc';\n    }\n\n    setSort({ [id]: order });\n    history.push({\n      search: `sortBy=${id}?sortOrder=${order}/`,\n    });\n  }\n\n  return (\n    <>\n      <h1 className=\"title\">This is People Page</h1>\n      <input\n        className=\"input is-primary\"\n        type=\"text\"\n        value={name}\n        onChange={(event) => {\n          handleQueryUpdate(event)\n        }}\n      >\n      </input>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th\n              id=\"name\"\n              onClick={(event) => { sortPeople(event.target.id) }}\n              className={classNames({\n                cell_active: idSelected === 'name'\n              })}\n            >\n              Name\n              </th>\n            <th\n              id=\"sex\"\n              onClick={(event) => { sortPeople(event.target.id) }}\n              className={classNames({\n                cell_active: idSelected === 'sex'\n              })}\n            >\n              Sex\n            </th>\n            <th\n              id=\"born\"\n              onClick={(event) => { sortPeople(event.target.id) }}\n              className={classNames({\n                cell_active: idSelected === 'born'\n              })}\n            >\n              Born\n            </th>\n            <th\n              id=\"died\"\n              onClick={(event) => { sortPeople(event.target.id) }}\n              className={classNames({\n                cell_active: idSelected === 'died'\n              })}\n            >\n              Died\n            </th>\n            <th>Mother</th>\n            <th>Father</th>\n          </tr>\n        </thead>\n        <tbody>\n          <PersonRow people={people} idSelected={idSelected} ></PersonRow>\n        </tbody>\n      </table>\n    </>\n  )\n}","import React from 'react';\n\nexport const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page Not Found</h1>\n  )\n} ","import React from 'react';\nimport {Switch, Route, NavLink, useLocation, Redirect} from 'react-router-dom';\nimport {HomePage} from './components/HomePage/HomePage';\nimport {PeoplePage} from './components/PeoplePage/PeoplePage';\nimport './App.scss';\nimport 'bulma/css/bulma.css';\nimport { NotFoundPage } from './components/NotFoundPage/NotFoundPage';\n\nconst App = () => {\n  if (useLocation().pathname === '/home') {\n    return <Redirect to=\"/\" />\n  }\n  return (\n  <div className=\"App\">\n    <nav className=\"navbar\">\n      <ul className=\"navbar-brand\">\n        <li><NavLink to=\"/\" activeClassName=\"nav__link_active\" className=\"navbar-item\"><h1>Home Page</h1></NavLink></li>\n        <li><NavLink to=\"/people\" activeClassName=\"nav__link_active\" className=\"navbar-item\"><h1>People Page</h1></NavLink></li>\n      </ul>\n    </nav>\n        \n    <Switch>\n      <Route path=\"/\" exact component={HomePage}></Route>\n      <Route path=\"/people\"  component={PeoplePage}></Route>\n      <Route path=\"*\" component={NotFoundPage}></Route>\n    </Switch>\n  </div>\n)\n  };\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}